from .models import User, Interaction, Match
from django.db.models.query import sync_to_async
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
async def start(update: Update, context):
    await update.message.reply_text("–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /register.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def register(update: Update, context):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    context.user_data.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data['step'] = 1


async def handle_registration(update: Update, context: CallbackContext):
    step = context.user_data.get('step')

    if step == 1:
        context.user_data['name'] = update.message.text
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:")
        context.user_data['step'] = 2

    elif step == 2:
        context.user_data['city'] = update.message.text
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
        context.user_data['step'] = 3

    elif step == 3:
        context.user_data['age'] = update.message.text
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [
                InlineKeyboardButton("–ü–∞—Ä–µ–Ω—å", callback_data="gender_M"),
                InlineKeyboardButton("–î–µ–≤—É—à–∫–∞", callback_data="gender_F"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=reply_markup)
        context.user_data['step'] = 4

    elif step == 5:
        context.user_data['description'] = update.message.text

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
        await create_or_update_user(
            telegram_id=update.message.from_user.id,
            name=context.user_data['name'],
            username=update.message.from_user.username,
            city=context.user_data['city'],
            age=context.user_data['age'],
            gender=context.user_data['gender'],
            description=context.user_data['description'],
        )

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        await update.message.reply_text(f"–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n"
                                        f"–ò–º—è: {context.user_data['name']}\n"
                                        f"–ì–æ—Ä–æ–¥: {context.user_data['city']}\n"
                                        f"–í–æ–∑—Ä–∞—Å—Ç: {context.user_data['age']}\n"
                                        f"–ü–æ–ª: {'–ü–∞—Ä–µ–Ω—å' if context.user_data['gender'] == 'M' else '–î–µ–≤—É—à–∫–∞'}\n"
                                        f"–û–ø–∏—Å–∞–Ω–∏–µ: {context.user_data['description']}")
        context.user_data.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
async def handle_gender_choice(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª –≤ user_data
    gender = query.data.split("_")[1]  # gender_M -> M
    context.user_data['gender'] = gender

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {'–ü–∞—Ä–µ–Ω—å' if gender == 'M' else '–î–µ–≤—É—à–∫–∞'}")
    await query.message.reply_text("–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:")
    context.user_data['step'] = 5


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@sync_to_async
def create_or_update_user(telegram_id, name, username, city, age, gender, description):
    user, created = User.objects.update_or_create(
        telegram_id=telegram_id,
        defaults={
            'name': name,
            'username': username,
            'city': city,
            'age': age,
            'gender': gender,
            'description': description,
        }
    )
    if created:
        print(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name}")
    else:
        print(f"–û–±–Ω–æ–≤–ª—ë–Ω –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {name}")
    return user


@sync_to_async
def get_next_profile(current_user_id):
    print(f"–ò—â–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è telegram_id {current_user_id}")
    user = User.objects.exclude(telegram_id=current_user_id).first()
    print(f"–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}")
    return user


async def show_profile(update, context):
    print("–ö–æ–º–∞–Ω–¥–∞ /browse –≤—ã–∑–≤–∞–Ω–∞")  # –û—Ç–ª–∞–¥–∫–∞
    await update.message.reply_text("–ò—â—É –∞–Ω–∫–µ—Ç—É...")  # –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    user = await get_next_profile(update.message.from_user.id)
    if not user:
        await update.message.reply_text("–ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–õ–∞–π–∫" –∏ "–î–∏–∑–ª–∞–π–∫"
    keyboard = [
        [
            InlineKeyboardButton("üëç –õ–∞–π–∫", callback_data=f"like_{user.telegram_id}"),
            InlineKeyboardButton("üëé –î–∏–∑–ª–∞–π–∫", callback_data=f"dislike_{user.telegram_id}"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—É
    await update.message.reply_text(
        f"–ò–º—è: {user.name}\n–ì–æ—Ä–æ–¥: {user.city}\n–í–æ–∑—Ä–∞—Å—Ç: {user.age}\n–û–ø–∏—Å–∞–Ω–∏–µ: {user.description}",
        reply_markup=reply_markup
    )


@sync_to_async
def save_interaction(from_user_id, to_user_id, is_like):
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    try:
        from_user = User.objects.get(telegram_id=from_user_id)
        to_user = User.objects.get(telegram_id=to_user_id)
    except User.DoesNotExist as e:
        raise ValueError(f"–û—à–∏–±–∫–∞: {e}")

    # –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
    interaction, created = Interaction.objects.get_or_create(
        from_user=from_user,
        to_user=to_user,
        defaults={'is_like': is_like}
    )
    if not created:
        interaction.is_like = is_like
        interaction.save()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
    if is_like:
        reverse_interaction = Interaction.objects.filter(
            from_user=to_user,
            to_user=from_user,
            is_like=True
        ).exists()
        if reverse_interaction:
            Match.objects.get_or_create(
                user1=min(from_user, to_user, key=lambda u: u.id),
                user2=max(from_user, to_user, key=lambda u: u.id)
            )



async def handle_like_dislike(update, context):
    query = update.callback_query
    await query.answer()

    data = query.data.split("_")
    action = data[0]  # "like" –∏–ª–∏ "dislike"
    to_user_id = int(data[1])
    from_user_id = query.from_user.id

    print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {action} –æ—Ç {from_user_id} –∫ {to_user_id}")

    try:
        await save_interaction(from_user_id, to_user_id, action == "like")
        await query.edit_message_text("–í–∞—à –≤—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
        await show_profile(update, context)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∫–µ—Ç–µ
    except ValueError as e:
        await query.edit_message_text(f"–û—à–∏–±–∫–∞: {e}")

